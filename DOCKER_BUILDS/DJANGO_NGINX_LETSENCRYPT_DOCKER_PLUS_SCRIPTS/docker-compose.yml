version: "3.8"

services:

  # pgadmin:
  #   build:
  #     context: "./pgadmin4_build"
  #     dockerfile: "./Dockerfile" # add build to make accessible to data, or use bind mount
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: pgadmin@admin.com
  #     PGADMIN_DEFAULT_PASSWORD: pw
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   volumes:
  #      - pgadmin_data:/var/lib/pgadmin
  #   ports:
  #     - "5050:80"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - postgres

  nginx:
    image: nginx:1.15-alpine
    restart: unless-stopped
    volumes:
      - ./nginx_data/certbot/conf:/etc/letsencrypt
      - ./nginx_data/certbot/www:/var/www/certbot
      - ./nginx_data/nginx:/etc/nginx/conf.d
      - static_data:/var/www/static
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - web

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./nginx_data/certbot/conf:/etc/letsencrypt
      - ./nginx_data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: gunicorn --worker-class=gevent --worker-connections=1000 --workers=3 csync.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/usr/src/app
      - static_data:/home/app/_static
    expose:
      - 8000
    env_file:
      - ./.env
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - postgres
      - web
      - redis

  postgres:
    image: postgres:14.1
    env_file:
      - ./.env.db
    volumes:
      #- $PWD/postgres_dump.dump:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - postgres
    restart: unless-stopped

  redis:
    image: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - redis

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A csync worker -l INFO
    volumes:
      - .:/usr/src/app
    env_file:
      - ./.env
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - redis
      - postgres

networks:
  postgres:
  redis:
  web:

volumes:
  # pgadmin_data:
  postgres_data:
  redis_data:
  static_data:
